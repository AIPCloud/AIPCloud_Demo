# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: speech_to_text/speech_to_text.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='speech_to_text/speech_to_text.proto',
  package='speech_to_text',
  syntax='proto3',
  serialized_pb=_b('\n#speech_to_text/speech_to_text.proto\x12\x0espeech_to_text\"I\n\x07Request\x12\x12\n\x06signal\x18\x01 \x03(\x02\x42\x02\x10\x01\x12\x13\n\x0bsample_rate\x18\x02 \x01(\x05\x12\x15\n\rlanguage_code\x18\x03 \x01(\t\"\x1c\n\x06Speech\x12\x12\n\ntranscript\x18\x01 \x01(\t\"G\n\x08Response\x12(\n\x08speeches\x18\x01 \x03(\x0b\x32\x16.speech_to_text.Speech\x12\x11\n\texec_time\x18\x02 \x01(\x02\x32R\n\x0cSpeechToText\x12\x42\n\x0bRecognition\x12\x17.speech_to_text.Request\x1a\x18.speech_to_text.Response\"\x00\x62\x06proto3')
)




_REQUEST = _descriptor.Descriptor(
  name='Request',
  full_name='speech_to_text.Request',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='signal', full_name='speech_to_text.Request.signal', index=0,
      number=1, type=2, cpp_type=6, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\020\001')), file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='sample_rate', full_name='speech_to_text.Request.sample_rate', index=1,
      number=2, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='language_code', full_name='speech_to_text.Request.language_code', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=55,
  serialized_end=128,
)


_SPEECH = _descriptor.Descriptor(
  name='Speech',
  full_name='speech_to_text.Speech',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='transcript', full_name='speech_to_text.Speech.transcript', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=130,
  serialized_end=158,
)


_RESPONSE = _descriptor.Descriptor(
  name='Response',
  full_name='speech_to_text.Response',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='speeches', full_name='speech_to_text.Response.speeches', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='exec_time', full_name='speech_to_text.Response.exec_time', index=1,
      number=2, type=2, cpp_type=6, label=1,
      has_default_value=False, default_value=float(0),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=160,
  serialized_end=231,
)

_RESPONSE.fields_by_name['speeches'].message_type = _SPEECH
DESCRIPTOR.message_types_by_name['Request'] = _REQUEST
DESCRIPTOR.message_types_by_name['Speech'] = _SPEECH
DESCRIPTOR.message_types_by_name['Response'] = _RESPONSE
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

Request = _reflection.GeneratedProtocolMessageType('Request', (_message.Message,), dict(
  DESCRIPTOR = _REQUEST,
  __module__ = 'speech_to_text.speech_to_text_pb2'
  # @@protoc_insertion_point(class_scope:speech_to_text.Request)
  ))
_sym_db.RegisterMessage(Request)

Speech = _reflection.GeneratedProtocolMessageType('Speech', (_message.Message,), dict(
  DESCRIPTOR = _SPEECH,
  __module__ = 'speech_to_text.speech_to_text_pb2'
  # @@protoc_insertion_point(class_scope:speech_to_text.Speech)
  ))
_sym_db.RegisterMessage(Speech)

Response = _reflection.GeneratedProtocolMessageType('Response', (_message.Message,), dict(
  DESCRIPTOR = _RESPONSE,
  __module__ = 'speech_to_text.speech_to_text_pb2'
  # @@protoc_insertion_point(class_scope:speech_to_text.Response)
  ))
_sym_db.RegisterMessage(Response)


_REQUEST.fields_by_name['signal'].has_options = True
_REQUEST.fields_by_name['signal']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\020\001'))

_SPEECHTOTEXT = _descriptor.ServiceDescriptor(
  name='SpeechToText',
  full_name='speech_to_text.SpeechToText',
  file=DESCRIPTOR,
  index=0,
  options=None,
  serialized_start=233,
  serialized_end=315,
  methods=[
  _descriptor.MethodDescriptor(
    name='Recognition',
    full_name='speech_to_text.SpeechToText.Recognition',
    index=0,
    containing_service=None,
    input_type=_REQUEST,
    output_type=_RESPONSE,
    options=None,
  ),
])
_sym_db.RegisterServiceDescriptor(_SPEECHTOTEXT)

DESCRIPTOR.services_by_name['SpeechToText'] = _SPEECHTOTEXT

# @@protoc_insertion_point(module_scope)
